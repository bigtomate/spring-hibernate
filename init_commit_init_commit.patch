Subject: [PATCH] init commit
init commit
---
Index: .gitignore
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(revision e2d5f4d12ce6ca84ca178ef9e2667e4361046c4b)
+++ b/.gitignore	(revision e2d5f4d12ce6ca84ca178ef9e2667e4361046c4b)
@@ -0,0 +1,51 @@
+HELP.md
+HELP
+target/
+!.mvn/wrapper/maven-wrapper.jar
+!**/src/main/**/target/
+!**/src/test/**/target/
+
+### STS ###
+.apt_generated
+.classpath
+.factorypath
+.project
+.settings
+.springBeans
+.sts4-cache
+
+### IntelliJ IDEA ###
+.idea
+*.iws
+*.iml
+*.ipr
+
+### NetBeans ###
+/nbproject/private/
+/nbbuild/
+/dist/
+/nbdist/
+/.nb-gradle/
+build/
+!**/src/main/**/build/
+!**/src/test/**/build/
+
+### VS Code ###
+.vscode/
+.gitattributes
+applypatch-msg.sample
+config
+description
+exclude
+fsmonitor-watchman.sample
+HEAD
+post-update.sample
+pre-applypatch.sample
+pre-commit.sample
+pre-merge-commit.sample
+pre-push.sample
+pre-receive.sample
+pre-rebase.sample
+prepare-commit-msg.sample
+push-to-checkout.sample
+update.sample
\ No newline at end of file
Index: .mvn/wrapper/maven-wrapper.properties
===================================================================
diff --git a/.mvn/wrapper/maven-wrapper.properties b/.mvn/wrapper/maven-wrapper.properties
new file mode 100644
--- /dev/null	(revision 2b22a477059c60bbfd94af2c4b991740972b0ae4)
+++ b/.mvn/wrapper/maven-wrapper.properties	(revision 2b22a477059c60bbfd94af2c4b991740972b0ae4)
@@ -0,0 +1,19 @@
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#   http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+wrapperVersion=3.3.2
+distributionType=only-script
+distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.11/apache-maven-3.9.11-bin.zip
Index: pom.xml
===================================================================
diff --git a/pom.xml b/pom.xml
new file mode 100644
--- /dev/null	(revision 2b22a477059c60bbfd94af2c4b991740972b0ae4)
+++ b/pom.xml	(revision 2b22a477059c60bbfd94af2c4b991740972b0ae4)
@@ -0,0 +1,129 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
+	<modelVersion>4.0.0</modelVersion>
+	<parent>
+		<groupId>org.springframework.boot</groupId>
+		<artifactId>spring-boot-starter-parent</artifactId>
+		<version>3.5.4</version>
+		<relativePath/> <!-- lookup parent from repository -->
+	</parent>
+	<groupId>com.springboot-hibernate</groupId>
+	<artifactId>spring-hiberate</artifactId>
+	<version>0.0.1-SNAPSHOT</version>
+	<name>spring-hiberate</name>
+	<description>springboot and hibernate project</description>
+	<url/>
+	<licenses>
+		<license/>
+	</licenses>
+	<developers>
+		<developer/>
+	</developers>
+	<scm>
+		<connection/>
+		<developerConnection/>
+		<tag/>
+		<url/>
+	</scm>
+	<properties>
+		<java.version>21</java.version>
+	</properties>
+	<dependencies>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-data-jdbc</artifactId>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-data-jpa</artifactId>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-graphql</artifactId>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-web</artifactId>
+		</dependency>
+
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-devtools</artifactId>
+			<scope>runtime</scope>
+			<optional>true</optional>
+		</dependency>
+		<dependency>
+			<groupId>com.mysql</groupId>
+			<artifactId>mysql-connector-j</artifactId>
+			<scope>runtime</scope>
+		</dependency>
+		<dependency>
+			<groupId>org.postgresql</groupId>
+			<artifactId>postgresql</artifactId>
+			<scope>runtime</scope>
+		</dependency>
+		<dependency>
+			<groupId>org.projectlombok</groupId>
+			<artifactId>lombok</artifactId>
+			<optional>true</optional>
+		</dependency>
+
+		<dependency>
+			<groupId>com.google.code.gson</groupId>
+			<artifactId>gson</artifactId>
+			<version>2.10.1</version>
+		</dependency>
+
+		<dependency>
+			<groupId>com.h2database</groupId>
+			<artifactId>h2</artifactId>
+		</dependency>
+
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-webflux</artifactId>
+		</dependency>
+
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-test</artifactId>
+			<scope>test</scope>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.graphql</groupId>
+			<artifactId>spring-graphql-test</artifactId>
+			<scope>test</scope>
+		</dependency>
+	</dependencies>
+
+	<build>
+		<plugins>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-compiler-plugin</artifactId>
+				<configuration>
+					<annotationProcessorPaths>
+						<path>
+							<groupId>org.projectlombok</groupId>
+							<artifactId>lombok</artifactId>
+						</path>
+					</annotationProcessorPaths>
+				</configuration>
+			</plugin>
+			<plugin>
+				<groupId>org.springframework.boot</groupId>
+				<artifactId>spring-boot-maven-plugin</artifactId>
+				<configuration>
+					<excludes>
+						<exclude>
+							<groupId>org.projectlombok</groupId>
+							<artifactId>lombok</artifactId>
+						</exclude>
+					</excludes>
+				</configuration>
+			</plugin>
+		</plugins>
+	</build>
+
+</project>
Index: src/main/java/com/springboot_hibernate/SpringHiberateApplication.java
===================================================================
diff --git a/src/main/java/com/springboot_hibernate/SpringHiberateApplication.java b/src/main/java/com/springboot_hibernate/SpringHiberateApplication.java
new file mode 100644
--- /dev/null	(revision 2b22a477059c60bbfd94af2c4b991740972b0ae4)
+++ b/src/main/java/com/springboot_hibernate/SpringHiberateApplication.java	(revision 2b22a477059c60bbfd94af2c4b991740972b0ae4)
@@ -0,0 +1,16 @@
+package com.springboot_hibernate;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.context.annotation.Bean;
+import org.springframework.web.client.RestClient;
+
+@SpringBootApplication
+public class SpringHiberateApplication {
+
+
+	public static void main(String[] args) {
+		SpringApplication.run(SpringHiberateApplication.class, args);
+	}
+
+}
Index: src/main/java/com/springboot_hibernate/hackerrank_restapi/FootBallApiResponse.java
===================================================================
diff --git a/src/main/java/com/springboot_hibernate/hackerrank_restapi/FootBallApiResponse.java b/src/main/java/com/springboot_hibernate/hackerrank_restapi/FootBallApiResponse.java
new file mode 100644
--- /dev/null	(revision 2b22a477059c60bbfd94af2c4b991740972b0ae4)
+++ b/src/main/java/com/springboot_hibernate/hackerrank_restapi/FootBallApiResponse.java	(revision 2b22a477059c60bbfd94af2c4b991740972b0ae4)
@@ -0,0 +1,16 @@
+package com.springboot_hibernate.hackerrank_restapi;
+
+import com.fasterxml.jackson.annotation.JsonProperty;
+
+import java.util.List;
+
+public class FootBallApiResponse {
+    @JsonProperty("total_pages")
+    int totalPages;
+
+    @JsonProperty("data")
+    List<FootBallResult> data;
+
+    @JsonProperty("total")
+    int total;
+}
Index: src/main/java/com/springboot_hibernate/hackerrank_restapi/FootBallMatchByTeamInYear.java
===================================================================
diff --git a/src/main/java/com/springboot_hibernate/hackerrank_restapi/FootBallMatchByTeamInYear.java b/src/main/java/com/springboot_hibernate/hackerrank_restapi/FootBallMatchByTeamInYear.java
new file mode 100644
--- /dev/null	(revision 2b22a477059c60bbfd94af2c4b991740972b0ae4)
+++ b/src/main/java/com/springboot_hibernate/hackerrank_restapi/FootBallMatchByTeamInYear.java	(revision 2b22a477059c60bbfd94af2c4b991740972b0ae4)
@@ -0,0 +1,88 @@
+package com.springboot_hibernate.hackerrank_restapi;
+
+import io.netty.util.internal.StringUtil;
+import org.springframework.stereotype.Service;
+import org.springframework.web.client.RestClient;
+
+
+@Service
+public class FootBallMatchByTeamInYear {
+
+
+    private final RestClient.Builder restClientBuilder;
+    private final RestClient restClient;
+    public FootBallMatchByTeamInYear(RestClient.Builder restClientBuilder) {
+        this.restClientBuilder = restClientBuilder;
+        this.restClient = createRestClient("https://jsonmock.hackerrank.com/api", "");
+    }
+
+
+    public int retrieveTotalGoalsInYear(String team, int year, String teamNr) {
+        int goals = 0;
+        int currentPage = 1;
+
+        while (true) {
+
+            String teamUrlFormat = "/football_matches?year=%s&%s=%s&page=%s";
+            String urlStr = String.format(teamUrlFormat, year, teamNr, team, currentPage);
+            FootBallApiResponse apiResponse =  restClient.get()
+                    .uri(urlStr)
+                    .retrieve()
+                    .body(FootBallApiResponse.class);
+
+            int totalPage = apiResponse.totalPages;
+
+            for (FootBallResult match : apiResponse.data) {
+             if (teamNr.equals("team2")) {
+                 goals += match.team2goals;
+             }
+             else if (teamNr.equals("team1")) {
+                    goals += match.team1goals;
+                }
+            }
+
+            if (currentPage >= totalPage) {
+                break;
+            }
+            currentPage++;
+        }
+
+        return goals;
+    }
+
+    public int retrieveDraws(int year) {
+        int draws = 0;
+        int countDraws = 0;
+        while (true) {
+                String urlStr = String.format(
+                        "/football_matches?year=%d&team1goals=%d&team2goals=%d",
+                        year, countDraws, countDraws
+                );
+
+            FootBallApiResponse apiResponse =  restClient.get()
+                    .uri(urlStr)
+                    .retrieve()
+                    .body(FootBallApiResponse.class);
+
+            draws += apiResponse.total;
+
+            if (countDraws > 9) {
+                break;
+            }
+            countDraws++;
+        }
+
+        return draws;
+    }
+    private RestClient createRestClient(String baseUrl, String bearerToken) {
+        return restClientBuilder
+                .baseUrl(baseUrl)
+                .requestInterceptor((request, body, execution) -> {
+                    if (bearerToken != null && !bearerToken.isEmpty()) {
+                        request.getHeaders().setBearerAuth(bearerToken);
+                    }
+                    return execution.execute(request, body);
+                })
+                .build();
+    }
+}
Index: src/main/java/com/springboot_hibernate/hackerrank_restapi/FootBallResult.java
===================================================================
diff --git a/src/main/java/com/springboot_hibernate/hackerrank_restapi/FootBallResult.java b/src/main/java/com/springboot_hibernate/hackerrank_restapi/FootBallResult.java
new file mode 100644
--- /dev/null	(revision 2b22a477059c60bbfd94af2c4b991740972b0ae4)
+++ b/src/main/java/com/springboot_hibernate/hackerrank_restapi/FootBallResult.java	(revision 2b22a477059c60bbfd94af2c4b991740972b0ae4)
@@ -0,0 +1,15 @@
+package com.springboot_hibernate.hackerrank_restapi;
+
+import com.fasterxml.jackson.annotation.JsonProperty;
+
+public class FootBallResult {
+    @JsonProperty("team2")
+    String team2;
+
+    @JsonProperty("team1")
+    String team1;
+    @JsonProperty("team1goals")
+    int team1goals;
+    @JsonProperty("team2goals")
+    int team2goals;
+}
Index: src/main/resources/application.properties
===================================================================
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
new file mode 100644
--- /dev/null	(revision 2b22a477059c60bbfd94af2c4b991740972b0ae4)
+++ b/src/main/resources/application.properties	(revision 2b22a477059c60bbfd94af2c4b991740972b0ae4)
@@ -0,0 +1,5 @@
+spring.application.name=spring-hiberate
+# h2 setting
+spring.datasource.url=jdbc:h2:mem:testdb;NON_KEYWORDS=USER
+# enable h2 console
+spring.h2.console.enabled=true
Index: src/test/java/com/springboot_hibernate/SpringHiberateApplicationTests.java
===================================================================
diff --git a/src/test/java/com/springboot_hibernate/SpringHiberateApplicationTests.java b/src/test/java/com/springboot_hibernate/SpringHiberateApplicationTests.java
new file mode 100644
--- /dev/null	(revision 2b22a477059c60bbfd94af2c4b991740972b0ae4)
+++ b/src/test/java/com/springboot_hibernate/SpringHiberateApplicationTests.java	(revision 2b22a477059c60bbfd94af2c4b991740972b0ae4)
@@ -0,0 +1,13 @@
+package com.springboot_hibernate;
+
+import org.junit.jupiter.api.Test;
+import org.springframework.boot.test.context.SpringBootTest;
+
+@SpringBootTest
+class SpringHiberateApplicationTests {
+
+	@Test
+	void contextLoads() {
+	}
+
+}
Index: src/test/java/com/springboot_hibernate/hackerrank_restapi/FootBallMatchByTeamInYearTest.java
===================================================================
diff --git a/src/test/java/com/springboot_hibernate/hackerrank_restapi/FootBallMatchByTeamInYearTest.java b/src/test/java/com/springboot_hibernate/hackerrank_restapi/FootBallMatchByTeamInYearTest.java
new file mode 100644
--- /dev/null	(revision 2b22a477059c60bbfd94af2c4b991740972b0ae4)
+++ b/src/test/java/com/springboot_hibernate/hackerrank_restapi/FootBallMatchByTeamInYearTest.java	(revision 2b22a477059c60bbfd94af2c4b991740972b0ae4)
@@ -0,0 +1,38 @@
+package com.springboot_hibernate.hackerrank_restapi;
+
+import org.junit.jupiter.api.Test;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+
+@SpringBootTest
+public class FootBallMatchByTeamInYearTest {
+
+
+    @Autowired  FootBallMatchByTeamInYear footBallMatchByTeamInYear;
+
+    @Test
+    public void testMatchedGoals()  {
+        int totalGoals = 0;
+        totalGoals+= footBallMatchByTeamInYear.retrieveTotalGoalsInYear("Barcelona", 2011, "team2");
+        totalGoals+= footBallMatchByTeamInYear.retrieveTotalGoalsInYear("Barcelona", 2011, "team1");
+        System.out.println(String.format("total goals: %s in %s of %s", totalGoals, 2011, "Barcelona"));
+
+        totalGoals = 0;
+        totalGoals+= footBallMatchByTeamInYear.retrieveTotalGoalsInYear("Chelsea", 2011, "team2");
+        totalGoals+= footBallMatchByTeamInYear.retrieveTotalGoalsInYear("Chelsea", 2011, "team1");
+        System.out.println(String.format("total goals: %s in %s of %s", totalGoals, 2011, "Chelsea"));
+    }
+
+    @Test
+    public void testDraw() {
+        long beginn = System.currentTimeMillis();
+        int totalDraws = 0;
+
+            totalDraws = footBallMatchByTeamInYear.retrieveDraws(2011);
+
+        System.out.println(
+                String.format("total draws: %s in %s ",totalDraws, 2011)
+        );
+        System.out.println((float) (System.currentTimeMillis() - beginn) / 1000);
+    }
+}
diff --git a/mvnw b/mvnw
new file mode 100644
index 0000000000000000000000000000000000000000..19529ddf8c6eaa08c5c75ff80652d21ce4b72f8c
GIT binary patch
literal 10665
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
Q`Egf84P)e#t~mJmAB0UEx&QzG

diff --git a/mvnw.cmd b/mvnw.cmd
new file mode 100644
index 0000000000000000000000000000000000000000..b150b91ed5005191af94bd95320b04d8148b8a53
GIT binary patch
literal 7061
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
J>QB$a{|0kcs<i+B

diff --git a/config b/config
new file mode 100644
index 0000000000000000000000000000000000000000..5c25f9d09cef8005d6bda31953356400eb14edb4
GIT binary patch
literal 343
zc$|%pK@P$|2u0WJDH@j=i)#~4Vq8osogs0C1{f1>FSU!hGVb`m|BrATS@702f-@@_
z%WGoE!Ja5eT)InlYMY53nE8&bOe(g`5M&b+i)V~Mx7O^MvnOILG=4d+;z5SpE(bM~
zos+9Pe45N=Jp)9tREOT(Fi<r1QxJ3(D)E?TKq=nneao*x8<SfPf|EkRa97x$KVqdQ
dtQ6R9To#H{esZfWl#H<a<hWFS^VW3dy#ZXbcRT<9

diff --git a/description b/description
new file mode 100644
index 0000000000000000000000000000000000000000..498b267a8c7812490d6479839c5577eaaec79d62
GIT binary patch
literal 73
zc$^E(%S+5nO;IRHEyyp<EXgmbv{pz>$t+PQ$;d2LNXyJgRZve!Elw`VEGWs$&r??@
Q$yWgB0LrH#Y0~2Y0PnOK(EtDd

